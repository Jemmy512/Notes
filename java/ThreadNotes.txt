	1.2.3 实例变量与线程安全
	（1）不共享变量
		MyThread a = new MyThread();
		MyThread b = new MyThread();
	（2）共享变量
		MyThread mt = new MyThread();
		Thread a = new Thread(mt);
		Thread b = new Thread(mt);
	1.2.4 i-- 与 System.out.println()
	1.3 CurrentThread
		MyThread() { Thread.currentThread().getName() = main; this.getName() = thread-0;  }
		run() { Thread.Current().getName().getName = A; this.getName() = thread-0;  }
	1.7 停止线程
		interrupted() : 判断是否interrupt，并清除该标记为false
		isInterrupted() ：判断是否interrupt
	1.7.3异常法停止线程
		if ( this.interrupted() ) { throw new InterruptedException(); }
	1.7.4 在沉睡中停止线程
	1.7.5 暴力停止
	1.8.2 suspend 和 resume的缺点----独占
		对同步资源独占，suspend 的线程没有resume会一直对资源占有，不释放
	1.8.3 suspend 和resume的缺点----不同步
	1.10线程的优先级
	1.10.1 线程优先级的传递性
		A线程启动B线程，则B线程具有和A线程同等的优先级

		在一个线程当中设置优先级对其启动没有任何效果，要在其启动之前设置优先级，包括	main线程
	1.10.2 线程优先级具有规则性和无序性

第二章 对象及变量的并发访问
	2.1synchronized同步方法
	2.1.1 方法内变量为线程安全
	2.1.2 实例变量非线程安全
	2.1.3 多个对象多个锁
		synchronized 拿到的都是对象锁，而不是一段代码或一个方法
	2.1.4 synchronized 方法与锁对象
		当一个线程持有某个对象锁，其他线程不能访问该对象的synchronized方法，但是可	以以异步的方法访问该对象的非synchronized方法。
	2.1.6 synchronized锁重入
		父子的继承关系中支持锁重入，同步的子类方法可以访问同步的父类方法；

	2.1.7 出现异常，锁自动释放
	2.1.8 同步不具有继承性
	2.2 同步语句块
	2.2.1 synchronized 方法的弊端
	2.2.6 synchronized(this) 锁定当前对象
	2.2.7 任意对象加锁
		synchronized ( ) 的参数为对象时，synchronized 代码块会同步执行，如果参数为非对象，	则得不到同步执行的效果

		synchronized  ( ) 持有不同对象时， 调用的结果也是异步执行
	2.2.8 synchronized 三个结论
	1. 当多个线程同时执行synchronized ( X ) {  } 代码块时呈现同步效果
	2. 当其他线程执行 X 对象中的synchronized 方法呈现同步效果
	3. 当其他线程实行 X 对象中 synchronized（this）代码块时呈现同步效果
	2.2.9 静态同步synchronized方法与synchronized（xxx.class）代码块
		Synchronized 如果对static方法加锁，则是对当前 .java 文件对应的class类枷锁。
		Class锁和对象锁是不同的锁，两者同时加锁不会冲突，class锁对类的所有实例起作用

		对同一对象的类加锁方法，对象加锁方法的调用会异步执行
		对同一类的不同实例的类加锁方法的调用会同步执行
	2.2.10 数据类型String的常量池特性
	 public void methodA(String str){
			try {
				synchronized(str){
					int i = 0;
					while(i < 5) {
						System.out.println(Thread.currentThread().getName());
						Thread.sleep(2000);
						i++;
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	2.2.11 同步synchronized方法无限等待
		当以synchronized方法无限持有某个对象时会造成死锁，导致其他线程无法执行，可改	用线程块来解决该问题。
	2.2.12 多线程的死锁
	2.3 Volatile 
		使变量在多个线之中可见。强制从公共堆栈中取得变量值而不是线程私有数据栈中取值
	2.3.5 使用原子类对i++进行操作
		AtomicInteger 
	2.3.7 原子类并非完全安全
		原子类的单个方法是安全的，方法之间的调用非安全，解决措施：synchronized

3 线程间的通信
	3.1 wait/notify 机制
		Wait方法立即释放锁，notify不立即释放锁，执行完notify中代码才会释放。
		在一个wait的线程调用interrupt会InterruptException
		多个wait/notify 系统中可能唤醒同类类，导致假死，无法执行下去。notifyAll解决
	3.1.12 使用管道流进行线程间的通信
	3.2 方法join（）使用
		Join() 方法与 interrupt() 相遇会产生异常
		Join(long) 在内部使用wait(long) 所以会释放锁，而 sleep(long) 不释放锁
	3.3 类ThreadLocal使用
		ThreadLocal解决变量在不同线程中的隔离性，是每个线程拥有自己的值，不同线程的	值可以放入到ThreadLocal中保存  
	3.4 InheritableThreadLocal
		在子线程中获得从父类继承的值
4. Lock
	4.1 ReentrantLock
		具有完全互斥排他的效果
		lock() 持有对象锁
		使用condition 之前必须lock（）加锁
		多个条件使用多个condition，同类condition只唤醒同类线程
	4.2 ReentrantReadWriteLock
