man 
--help


Network Config:
	ifconfig
	sudo ifconfig eth0 192.168.1.212 netmask 255.255.255.0

FTP service：
	check service: lsof -i :21
	Install service: apt-get install vsftpd
SSH service：
	check service：lsof -i :22  
	Install service: apt-get install openssh-server

**********************************************  Make File  *****************************************

1. syntax
	target: prerequisites...
		command # command line must must start with tab
	...
	
2. file name rules: Makefile / makefile / GNUmakefile

3. Five parts of makefile: 
	1. explicit rules 2. implicit rules 3. comments 4. variable defination
	5. file instruction:
		3.1 include other makefile
		3.2 specify valid parts of makefile according to cases
		3.3 define a mutil-line command
4. wildcards: *, ? [...]
	object = *.o # value of variable object is '*.o' not all .o suffix files
	objects := $(wildcard *.o) # value of variable object is all .o suffix files

5. File Search:
	1. makefile special variable:
		VPATH = <path1> : <path2> : <path3> ...
	2.makefile vpath keyword
		vapth <pattern> <directories> # vpath %.h ../header
		vpath <path> 	# clear search directories for files that match pattern <pattern>
		vpath			# clear all file search directories that have been set up
6. Mutil Target:
	bigoutput littleoutput: text.gcc
		generate text.g  -$(func args,,$@)>$@ # $:function, $@: sets of target
7. Static Mode:
	<target...> : <target-pattern> : <prereq-pattern>
		<command>
  eg:
	objects = foo.o bar.o
	all: $(objects)
	$(objects): %.o: %.c
           $(CC) -c $(CFLAGS) $< -o $@ # $<: first file of dependences, $^: all dependences, $@: sets of targets
	# $?: all dependences that newer than target file, $*: represent '%' in the target pasttern and its predecessor
8. Automatically generate dependencies
	%.d: %.c
		@set -e; rm -f $@; \
		$(CC) -M $(CPPFLAGS) $< > $@.  //-MM include std head files, -M just include dependent head files
	; \
				sed 's,$∗\.o[ :]*,\1.o $@ : ,g' < $@.
		> $@; \
				rm -f $@.

9. ; # if two next instruction dependent on previous instruction, thems should write in one line, sperate by ;
	exec:
		cd /home/hchen; pwd	# result is: pwd = /home/hchen
10 clean
	.PHONE clean
	clean:
		rm -i -f -k # -i(-ignore-errors) -k(-keep-going) -f(-force)
11. Nested Make
	subsystem:
           cd subdir && $(MAKE) # execute makefile in sudir directory may be with arguments $(MAKE)
	(un)export<variable ...>  # pass variables in current makefile to child makefile 
							  # SHELL and MAKEFLAGS varialbles always pass to child makefile
12. define instruction pakage
	define	pakageName
		command...
		command...
	enddef
13 Variable
	13.1 define
		x = $(y) # current variable can use next defined varaible
		y = z    

		x := foo # current variable can use only previous defined variables
		FOO ?= bar # if FOO is not defined its value is bar, otherwise is previous defined value
	13.2 value replacement
		foo := a.o b.o c.o
		bar := $(foo:.o=.c)	# a.c b.c c.c
		
		foo := a.o b.o c.o
		bar := $(foo:%.o=%.c) # static mode

		first_second = Hello
		a = first
		b = second
		all = $($a_$b) # all = first_sencond
	13.3 append value to value	
		objects = main.o foo.o bar.o utils.o
		objects += another.o
	13.4 override
		override <variable> = <value> # override variables defined  make instruction line
		override <variable> := <value>
		override <variable> = <value>
	13.5 multi-line variable
		define two-lines
		echo foo
		echo $(bar)
		endef





**********************************************  GDB  ***********************************************	
__LINE__, __FILE__, __func__, __DATE__, __TIME__, __STDC__, __cplusplus__

#define DEBUG

#ifdef DEBUG
 #define DBG_PRINT(fmt, args...) do {printf("[*]%s: <%s>: "fmt"\n"\
    , __FILE__, __func__, ##args); } while (FALSE);
	
//DBG_PRINT(format,...) printf("FILE: "__FILE__", LINE: %d: "format"/n", __LINE__, ##__VA_ARGS__)
#else
 #define BEG_PRINT(...) do {} while (FALSE)
#endif

core dump:
	1. suffix with pid
		echo "1" > /proc/sys/kernel/core_uses_pid  # 0 without suffix, 1 with pid suffix
	2. name form and path
		echo "/corefile/core-%e-%p-%t" > proc/sys/kernel/core_pattern
		%e(name) %p(pid) %u(uid) %g(gid) %s(signal) %t(time) %h(host name)
Gdb:
	file <program>
	kill <program>
	make source file to be debug:
		gcc -g -o ObjFileName sourceFileName
	open gdb:
		1. gdb <program>
		2. gdb <attach> <pid> 
		3. gdb <program> core
	run program: r
	run program with args: 
		set args <arg1><arg2>...
		show args
		show path
	exit gdb: quit/q
	Show content of file: list/l
		set listsize <num>
		show listsize
		list <linenum>
		list <function>
		list <filename:linenum>
		list <filename:funciton>
		list <+offset>
		list <-offset>
		list <firstLine>, <lastLine>
		list , <last>
		list + <num>
		l 10
		l main
		l hello.c:20
		l hello.c:main
	show content in GUI: focus, layout
	BreakPoint: break/b 
		b <linenum>
		b <function>
		b <funcion(type...)>
		b <filenname:linenum>
		b *<address> # memory breakpoint
		b if <conditon>
		b <linenum> thread <threadno> # if there is no threadno specified, bk will apply to all threads
		b <linenum> thread <threadno> if... # when one thread stop, all threads will be stopped by gdb
		ignore <bk no> <count>
	view breakpoint info: info breakpoint
	clean breakpoint: clear
	condition bk:
		condition <bk no> <expr>
		condition <bk no> # clear bk which num is no
	command: # when bk we can do other things
		command <bkno>
		... commnad-list...
		end
	watch point:
		watch <expr> 
		rwatch <expr> # stop program when expr is readed
		awatch <expr> # stop program when expr is read or writed
	catch point:
		catch <event> #event: throw, catch, exec, fork, vfork, load, unload
		tcatch <event> # one time catch point
		
	go: run/r
	Step into: step/s  <count>
	Step over: next/n  <count>
	run to next bk: continue/c <ignor-count>
	finish for loop: util/u <linenum>
	finish current function: finish/f
	set step-mode <on/off>
	
	step machine code: 
		setpi/si
		nexti
		display/i $pc
	function call stack: bt <n> #backtrack
	switch current stack:
		frame <n>
		up <n>
		down <n>
		info frame
		info args
		info locals
		info catch #
		info program #check the satus of current program and pid, stop reason
		info threads
		info watchpoints
		info signals
		info handle
	Methods of stopping program:
		BreakPoint, WatchPoint, CatchPoint, Signals, Thread Stops
	Signals:
		handle <signal> <keywords...>
		#keywords: nostop, stop, print, noprint, pass noignore, nopass ignore
	memory: examine/x (x/n,f,u)
		x [Address expression]
		x /[Format] [Address expression]
		x /[Length][Format] [Address expression]
	disable/enable breakpoint: 
		disable/enables breakpoint bkNum
		delete <bk no><range>
	
	view registers: info register (i r)
	view vriable:
		info local variableName
		info local file::variableName
		info local function::variable
		info registers variableName
		whatis <var> # show var type and value
		ptype <var> # show var type
	view: print/f
		x d u o t a c f
		
		set print pretty  = on/off
		$1 = {a = 100, b = 200, c = 300}
		
		print var = value # change the local variable's value
	display:
		display/<fmt> <varname>
		display/i $pc
		info display
		disalbe enable 
	jump:
		jump <linenum>
		jump <address>
		set $pc = address
	call:
		call <funname>
 	view array:
		print *<array>@<len>
		int a[10]-> p *a@10
	run shell in gdb: shell <command>
Search:
	forward-search <regexp>
	search <regexp>
	reverse-search <regexp>
source path:
		directory <dirname...> # :(unix), ;(window)
		directory # clear path info
		show directories
define own enviroment variable int GDB:
	set $<varname> = <value> # enviromet var have no type
	show convenience # view all enviroment variable
	

**********************************************  Network Programming  *******************************
Methods of Local Processes Communication:
	1. Messaging (pipeline, FIFO, message queue)
	2. Synchronization (mutex, conditional variable, read and write lock, file and wirte and lock lock, semaphore)
	3. Shared memory (anonymous and named)
	4. Remote procedure Call (Solaris gate and sun RPC)
	
Procedure of socket:
	1. Create Soket (client and server)
		int socket(int domain, int type, int protocol);
		
		doamin: AF_INET, AF_INET6, AF_LOCAL, AF_ROUTE
		type: SOCK_STREAM, SOCK_DGRAM, SOCK_RAW, SOCK_PACKET, SOCK_SEQPACKET
		protocol: IPPROTO_TCP, IPPROTO_UDP, IPPROTO_SCTP
	2. bind (server)
		int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
		
		struct sockaddr_in {
			sa_family_t sin_family;	// address family
			in_port_t sin_port;		// port in network byte order
			struct in_addr sin_addr;// internet address
		};
		struct in_addr {
			uint32_t s_addr;	// address in network byte order
		};
		
		#include <arpa/inet.h>
		uint32_t htonl(uint32_t hostlong);
		uint16_t htons(uint16_t hostshort);
		uint32_t ntohl(uint32_t netlong);
		uint16_t ntohs(uint16_t netshort);
		
		#include <sys/socket.h>
		#include <netinet/in.h>
		#include <arpa/inet.h>
<<<<<<< HEAD
		int inet_aton(const char *cp, struct in_addr *inp);
		int inet_pton(int af, const char *src, void *dst);	// convert IP from text to binary form
=======
		int inet_aton(const char *cp, struct in_addr *inp); //
>>>>>>> 81a8620ba3f92ceda0e539de6558d276f9d53fe1
		in_addr_t inet_addr(const char *cp);
		in_addr_t inet_network(const char *cp);
		char *inet_ntoa(struct in_addr in);
		int inet_pton(int af, const char *src, void *dst); // "0.0.0.0" -> 0.0.0.0
		const char *inet_ntop(int af, const void *src, char *dst, socklen_t cnt); 
		struct in_addr inet_makeaddr(int net, int host);
		in_addr_t inet_lnaof(struct in_addr in);
		in_addr_t inet_netof(struct in_addr in);
		
	3. listen(sever) and connect(client)
		int listen (int sockfd, int backlog);
		int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
	4. accept (client and server)
		int accept(int sockfd, struct sockaddr* addr, socklen_t *addrlen);
	5. read and write (client and server)
		ssize_t read(int fd, void *buf, size_t count);
		ssize_t write(int fd, const void *buf, size_t count);
		
		ssize_t send(int sockfd, const *buf, size_t len, int flags);
		ssize_t recv(int sockfd, void *buf, size_t len, int flags);
		
		ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
						const struct sockaddr *dest_addr, socklen_t addrlen);
		ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, 
						struct sockaddr *stc_addr, socklen_t *addrlen);
						
		ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);
		ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
		
	5. close <unistd.h>
		int close(int fd);

Components of Server:
	1. IO communication unit
		1.1 Port multiplexing
			select 1000, poll, epoll 30W
		1.2 Synchronization	
			http https 
		1.3 asynchroniztion
			signal, sigaction
		1.4 asynchronous IO
			aio_read, aio_write
	2. Data Process Unit	
		2.1 Multiple Thread	
			Thread Mutext: mutex, spin, atomic
			Thread Synchronization: PV, semaphore
			Thread Communication
		2.2 Multiple Prcesses
			IPC pip, fifo, socketpair
		2.3 Multiple Thread + Multiple Process
			Thread Pool
			Process Pool
	3. Date Storage
Two high-performance server architectures:
	1. Reactor
	2. Proactor
	
Port multiplexing:
	1. select
		#include <sys/select.h>
		#include <sys/time.h>
		int select(int maxfs1, fs_set *readset, fd_set *writeset, fd_set *exceptset, const struct timeval *timeout)
		void FD_ZERO(fd_set *fdset);
		void FD_SET(int fd, fd_set *fdset);
		void FD_CLR(int fd, fd_set *fdset);
		void FD_ISSET(int fd, fd_set *fdset);
		void FD_ZERO(fd_set *fdset); 
        struct timeval{
			long tv_sec;   //seconds
            long tv_usec;  //microseconds
		};
	2. Poll
		# include <poll.h>
		int poll( struct pollfd * fds, unsigned int nfds, int timeout);

		struct pollfd {
			int fd;         	
			short events;       // waiting event  
			short revents;      // happend event
		} ; 
		Event: POLLIN, POLLRDNORM, POLLBAND, POLLPRI, POLLOUT, POLLWRNORM,
				POLLWRBAND, POLLMSGSIGPOLL, POLLER, POLLHUP, POLLNVAL
	3. Epoll
		#include <sys/epoll.h>
		int epoll_create(int size);
		int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
			op: EPOLL_CTL_ADD, EPOLL_CTL_MOD, EPOLL_CTL_DEL
			struct epoll_event {
			  __uint32_t events;  /* Epoll events */
			  epoll_data_t data;  /* User data variable */
			};
			Event: EPOLLIN, EPOLLOUT, EPOLLPRI, EPOLLET, EPOLLONESHOT, EPOLLERR, EPOLLHUP
		int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);
		
		#include <sys/socket.h>
		int setsockopt(int socket, int level, int option_name, const void *option_value, socklen_t option_len);
			level: SOL_SOCKET, IPPROTO_TCP
			option_name: SO_REUSEADDR, SO_KEEPLIVE, SO_LINGER
			
		#include <unistd.h>
		#include <fcntl.h>
		int fcntl(int fd, int cmd, ... /* arg */ ); // manipulate file descriptor
			cmd: F_DUPFD, F_SETFD, F_GETFL, 

Raw-socket:
	int setsockopt (int socket, int level, int optname, const void *optvalue, socklen_t optlen);  // ok:0
	int getsockopt (int sockfd, int level, int optname, void *optval, socklen_t *optlen);
	level: 	
		SOL_SOKCET: SO_BROADCASE(bool), SO_RCVTIMEO(struct timevl), SO_SNDTIMEO(struct timeval), 
			SO_REUSEADDR, SO_KEEPALIVE, SO_LINGER, 
		IPPROTO_IP: IP_HDRINCL(bool), IP_ADD_MEMBERSHIP(struct ip_mreq), IP_DROP_MEMBERSHIP, IP_MULTICAST_IF(DWORD),
			IP_MULTICAST_LOOP, IP_MULTICAST_TTL	

**********************************************  Signal Programming  ********************************
Signal dispositions: Term, Ign, Core, Stop, Cont

Linux Signals are:
    Signal Name	Number	Description
    SIGHUP	1	Hangup (POSIX)
    SIGINT	2	Terminal interrupt (ANSI)
    SIGQUIT	3	Terminal quit (POSIX)
    SIGILL	4	Illegal instruction (ANSI)
    SIGTRAP	5	Trace trap (POSIX)
    SIGIOT	6	IOT Trap (4.2 BSD)
    SIGBUS	7	BUS error (4.2 BSD)
    SIGFPE	8	Floating point exception (ANSI)
    SIGKILL	9	Kill(can't be caught or ignored) (POSIX)
    SIGUSR1	10	User defined signal 1 (POSIX)
    SIGSEGV	11	Invalid memory segment access (ANSI)
    SIGUSR2	12	User defined signal 2 (POSIX)
    SIGPIPE	13	Write on a pipe with no reader, Broken pipe (POSIX)
    SIGALRM	14	Alarm clock (POSIX)
    SIGTERM	15	Termination (ANSI)
    SIGSTKFLT	16	Stack fault
    SIGCHLD	17	Child process has stopped or exited, changed (POSIX)
    SIGCONT	18	Continue executing, if stopped (POSIX)
    SIGSTOP	19	Stop executing(can't be caught or ignored) (POSIX)
    SIGTSTP	20	Terminal stop signal (POSIX)
    SIGTTIN	21	Background process trying to read, from TTY (POSIX)
    SIGTTOU	22	Background process trying to write, to TTY (POSIX)
    SIGURG	23	Urgent condition on socket (4.2 BSD)
    SIGXCPU	24	CPU limit exceeded (4.2 BSD)
    SIGXFSZ	25	File size limit exceeded (4.2 BSD)
    SIGVTALRM	26	Virtual alarm clock (4.2 BSD)
    SIGPROF	27	Profiling alarm clock (4.2 BSD)
    SIGWINCH	28	Window size change (4.3 BSD, Sun)
    SIGIO	29	I/O now possible (4.2 BSD)
    SIGPWR	30	Power failure restart (System V)

sighandler_t signal(int signum, sighandler_t handler);
    // multi-process is unspecified
    // behavior is undefined if a process ignores SIGFPE, SIGILL, SIGSEGV
    
sending a signal:
    raise(); kill(); killpg(); pthread_kill(); tgkill(); sigqueue();
waiting for a signal to be caught:  
    pause(); sigsuspend();
syschronously accepting a signal:
    sigwaitinfo(); sigtimedwait(); sigwait();
    signalfd();
signal mask:
    pthread_sigmask(); int sigprocmask (int how, const sigset_t *restrict set, sigset_t *restrict oldset);
    how: SIG_BLOCK, SIG_UNBLOCK, SIG_SETMASK
sigset_t:
    sigemptyset(sigset_t *set);   sigaddset(sigset_t *set, int signum);  
    sigfillset(sigset_t *set);    sigdelset(sigset_t *set, int signum);
    sigismember(const sigset_t *set, int signum);

    sigaltstack();
sigaction:
    int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
    
    struct sigaction {
      void (*sa_handler)(int);
      void (*sa_sigaction)(int, siginfo_t *, void *);
      sigset_t sa_mask;
      int sa_flags;
      void (*sa_restorer)(void);
    };
    
    sa_mask: SA_NOCLDSTOP, SA_NOCLDWAIT, SA_NODEFER, SA_ONSTACK, SA_RESETHAND, SA_RESTART, SA_RESETORE, SA_SIGINFO

signaltstack():







